using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using SmartBox.Business.Core.Models.Booking;
using SmartBox.Business.Core.Models.CompanyUser;
using SmartBox.Business.Core.Models.Pricing;
using SmartBox.Business.Core.Models.ResponseValidity;
using SmartBox.Business.Core.Models.User;
using SmartBox.Business.Services.Service.CompanyUser;
using SmartBox.Business.Services.Service.Locker;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using static Slapper.AutoMapper;

namespace SmartBox.Corporate.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CompanyUserController : ControllerBase
    {
        private readonly ICompanyUserService _companyUserService;
        private readonly ILockerService lockerService;
        public CompanyUserController(ICompanyUserService companyUserService, ILockerService lockerService)
        {
            _companyUserService = companyUserService;
            this.lockerService = lockerService;
        }

        /// <summary>
        /// Activate the company user created
        /// <br/>
        /// </summary>
        /// <remarks> activate the created user by the system or admin, use the UserKeyId generated by the user
        /// <br/>
        ///   
        ///   Firstname and Lastname should replace the "default" value
        ///   Password should replace the default value set by the system
        /// </remarks>
        /// <param name="activatonCompanyUserModel">activatonCompanyUserModel</param>
        /// <returns> returns if validity model if successfully save</returns>
        /// <response code="200">ResponseValidityModel either success or failed</response>
        [HttpPut("ActivateSystemGeneratedCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Put))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Conflict)]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Accepted)]
        public async Task<ActionResult<ResponseValidityModel>> ActivateSystemGeneratedCompanyUser([BindRequired] ActivatonCompanyUserModel activatonCompanyUserModel)
        {
            var model = await _companyUserService.ActivateCompanyUser(activatonCompanyUserModel, true);
            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
            {
                return Conflict(model);
            }
        }

        /// <summary>
        /// Activate the company user created
        /// <br/>
        /// </summary>
        /// <remarks> Manually created company user will use username and passwor for activating the account
        /// <br/>
        ///   Required: Username and Password
        /// </remarks>
        /// <param name="username">username</param>
        /// <param name="newPassword">set new password</param>
        /// <returns> returns if validity model if successfully save</returns>
        /// <response code="200">ResponseValidityModel either success or failed</response>
        [HttpPut("ActivateCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Put))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Conflict)]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Accepted)]
        public async Task<ActionResult<ResponseValidityModel>> ActivateCompanyUser([BindRequired] string username, [BindRequired] string newPassword)
        {
            ActivatonCompanyUserModel activatonCompanyUserModel = new ActivatonCompanyUserModel
            {
                Username = username,
                Password = newPassword
            };

            var model = await _companyUserService.ActivateCompanyUser(activatonCompanyUserModel, false);
            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
            {
                return Conflict(model);
            }
        }

        /// <summary>
        /// Log in the admin user
        /// </summary>
        /// <param name="username">username</param>
        /// <param name="password">password</param>
        /// <returns> returns model  with token when success</returns>
        /// <remarks> username and password cannot be empty </remarks>
        /// <response code="200">User successfully log-in</response>
        [HttpPost("LogInCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Post))]
        [ProducesResponseType(typeof(AuthenticationModel), (int)HttpStatusCode.Conflict)]
        public async Task<ActionResult<AuthenticationModel>> LogInCompanyUser([BindRequired] string username, [BindRequired] string password)
        {
            CompanyUserLogInModel logInModel = new CompanyUserLogInModel
            {
                Userame = username,
                Password = password
            };

            var model = await _companyUserService.GetCompanyLogInUser(logInModel);
            if (model.ValidityModel.MessageReturnNumber > 0)
                return Ok(model);
            else
                return Conflict(model);
        }


        /// <summary>
        /// Create company user 
        /// <br/>
        /// </summary>
        /// <remarks> all fields are required
        /// </remarks>
        /// <param name="postCompanyUserModel">postCompanyUserModel</param>
        /// <returns> returns if validity model if successfully save</returns>
        /// <response code="200">ResponseValidityModel either success or failed</response>
        [HttpPost("SaveCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Post))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.PreconditionFailed)]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Accepted)]
        public async Task<ActionResult<ResponseValidityModel>> SaveCompanyUser([BindRequired] PostCompanyUserModel postCompanyUserModel)
        {
            var model = await _companyUserService.SaveCompanyUser(postCompanyUserModel);

            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
            {
                return this.StatusCode(StatusCodes.Status412PreconditionFailed, model);
            }
        }

        /// <summary>
        /// Update the company user profile
        /// <br/>
        /// </summary>
        /// <remarks> update company user by, username is not updatable
        /// </remarks>
        /// <param name="postUpdateCompanyUserModel">postCompanyUserModel</param>
        /// <returns> returns if validity model if successfully save</returns>
        /// <response code="200">ResponseValidityModel either success or failed</response>
        [HttpPost("UpdateCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Post))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.PreconditionFailed)]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Accepted)]
        public async Task<ActionResult<ResponseValidityModel>> UpdateCompanyUser(PostUpdateCompanyUserModel postUpdateCompanyUserModel)
        {
            var model = await _companyUserService.UpdateCompanyUser(postUpdateCompanyUserModel);

            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
            {
                return this.StatusCode(StatusCodes.Status412PreconditionFailed, model);
            }
        }

        /// <summary>
        /// Get List of all the company user
        /// <br/>
        /// </summary>
        /// <returns> returns a list of List of CompanyUserViewModel</returns>
        /// <param name="username">username</param>
        /// <response code="200">returns list of company user</response>
        [HttpPost("GetCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Get))]
        [ProducesResponseType(typeof(List<CompanyUserViewModel>), (int)HttpStatusCode.Accepted)]
        public async Task<ActionResult<List<CompanyUserViewModel>>> GetCompanyUser(string username = null)
        {
            var model = await _companyUserService.GetCompanyUser(username: username);
            return Ok(model);
        }
        [HttpDelete("DeleteCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Delete))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Conflict)]
        public async Task<ActionResult<ResponseValidityModel>> DeleteCompanyUser([FromQuery] int id)
        {
            var model = await _companyUserService.DeleteCompanyUser(id);
            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
                return Conflict(model);
        }

        [HttpGet("ActivateDeactivateCompanyUser")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Get))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Conflict)]
        public async Task<ActionResult<ResponseValidityModel>> ActivateDeactivate([FromQuery] int Id, int? isActive = null)
        {
            var model = await _companyUserService.ActivateDeactivate(Id, isActive);
            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
                return Conflict(model);
        }
        #region Locker Bookings
        /// <summary>
        /// Get a list of Reassigned Booking Locker Model
        /// </summary>
        /// <returns> returns list Reassigned Booking Locker </returns>
        /// <response code="200">ReassignedBookingLockerViewModel list</response>
        [Authorize]
        [HttpGet("GetReassignedBookingLockerHistory")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Get))]
        [ProducesResponseType(typeof(List<ReassignedBookingLockerViewModel>), (int)HttpStatusCode.Accepted)]
        public async Task<ActionResult<List<ReassignedBookingLockerViewModel>>> GetReassignedBookingLockerHistory(int? lockerDetailId = null, int? lockerTransactionsId = null, int? companyUserId = null)
        {
            var model = await lockerService.GetReassignedBookingLockerHistoryForCompanyUser(User.Identity.Name, lockerDetailId, lockerTransactionsId, companyUserId);
            return Ok(model);
        }
        /// <summary>
        /// update Booking's Locker Detail Id.
        /// <br/>
        /// </summary>
        /// <param name="bookingLockerDetailModel">Request's payload</param>
        /// <returns> returns if validity model if successfully save</returns>
        /// <response code="200">ResponseValidityModel either success or failed</response>
        [Authorize]
        [HttpPost("ReassignBookingLocker")]
        [ApiConventionMethod(typeof(DefaultApiConventions), nameof(DefaultApiConventions.Post))]
        [ProducesResponseType(typeof(ResponseValidityModel), (int)HttpStatusCode.Conflict)]
        public async Task<ActionResult<ResponseValidityModel>> UpdateBookingLockerDetail([FromBody] BookingLockerDetailModel bookingLockerDetailModel)
        {
            var model = await lockerService.ReassignBookingForCompanyUser(bookingLockerDetailModel, User.Identity.Name);
            if (model.MessageReturnNumber > 0)
                return Ok(model);
            else
            {
                return Conflict(model);
            }
        }
        #endregion
    }
}
